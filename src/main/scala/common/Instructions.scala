package rainy.shaheway.org
package common

import chisel3.util._

object Instructions{
  // RV64I Base Integer Instructions
  // R-Type "funct7(7)_rs2(5)_rs1(5)_funct3(3)_rd(5)_opcode(7)"
  // I-Type "imm(12)_rs1(5)_funct3(3)_rd(7)_opcode(7)"
  // S-Type "imm(7)_rs2(5)_rs1(5)_funct3(3)_imm(5)_opcode(7)"
  // B-Type "imm(7)_rs2(5)_rs1(5)_funct3(3)_imm(5)_opcode(7)"
  // U-Type "imm(20)_rd(5)_opcode(7)"
  // J-Type "imm(20)_rd(5)_opcode(7)"
  // Arithmetic
  val R_ADD      = BitPat("b0000000??????????000?????0110011")
  val R_ADDW     = BitPat("b0000000??????????000?????0111011") // RV64 Only
  val R_SUB      = BitPat("b0100000??????????000?????0110011")
  val R_SUBW     = BitPat("b0100000??????????000?????0111011") // RV64 Only
  val R_AND      = BitPat("b0000000??????????111?????0110011")
  val R_OR       = BitPat("b0000000??????????110?????0110011")
  val R_XOR      = BitPat("b0000000??????????100?????0110011")
  val R_SLL      = BitPat("b0000000??????????001?????0110011")
  val R_SLLW     = BitPat("b0000000??????????001?????0111011") // RV64 Only
  val R_SRL      = BitPat("b0000000??????????101?????0110011")
  val R_SRLW     = BitPat("b0000000??????????101?????0111011") // RV64 Only
  val R_SRA      = BitPat("b0100000??????????101?????0110011")
  val R_SRAW     = BitPat("b0101000??????????101?????0111011") // RV64 Only
  val R_SLT      = BitPat("b0000000??????????010?????0110011")
  val R_SLTU     = BitPat("b0000000??????????011?????0110011")
  val I_ADDI     = BitPat("b?????????????????000?????0010011")
  val I_ADDIW    = BitPat("b?????????????????000?????0011011") // RV64 Only
  val I_ANDI     = BitPat("b?????????????????111?????0010011")
  val I_ORI      = BitPat("b?????????????????110?????0010011")
  val I_XORI     = BitPat("b?????????????????100?????0010011")
  // val I_SLLI  = BitPat("b0000000??????????001?????0010011")
  // For RV32, instruction is valid only when shamt[5] == 0.
  val I_SLLI     = BitPat("b000000???????????001?????0010011") // RV64 & RV32
  val I_SLLIW    = BitPat("b000000???????????001?????0011011") // RV64 Only
  // val I_SRLI  = BitPat("b0000000??????????101?????0010011")
  // For RV32, instruction is valid only when shamt[5] == 0.
  val I_SRLI     = BitPat("b000000???????????101?????0010011") // RV64 & RV32
  val I_SRLIW    = BitPat("b000000???????????101?????0011011") // RV64 Only
  // val I_SRAI  = BitPat("b0100000??????????101?????0010011")
  // For RV32, instruction is valid only when shamt[5] == 0.
  val I_SRAI     = BitPat("b010000???????????101?????0010011") // RV64 & RV32
  val I_SRAIW    = BitPat("b010000???????????101?????0011011") // RV64 Only
  val I_SLTI     = BitPat("b?????????????????010?????0010011")
  val I_SLTIU    = BitPat("b?????????????????011?????0010011")
  // Memory
  val I_LB       = BitPat("b?????????????????000?????0000011")
  val I_LBU      = BitPat("b?????????????????100?????0000011")
  val I_LH       = BitPat("b?????????????????001?????0000011")
  val I_LHU      = BitPat("b?????????????????101?????0000011")
  val I_LW       = BitPat("b?????????????????010?????0000011")
  val I_LWU      = BitPat("b?????????????????110?????0000011") // RV64 Only
  val I_LD       = BitPat("b?????????????????011?????0000011") // RV64 Only
  val S_SB       = BitPat("b?????????????????000?????0100011")
  val S_SH       = BitPat("b?????????????????001?????0100011")
  val S_SW       = BitPat("b?????????????????010?????0100011")
  val S_SD       = BitPat("b?????????????????011?????0100011") // RV64 Only
  // Control
  val B_BEQ      = BitPat("b?????????????????000?????1100011")
  val B_BGE      = BitPat("b?????????????????101?????1100011")
  val B_BGEU     = BitPat("b?????????????????111?????1100011")
  val B_BLT      = BitPat("b?????????????????100?????1100011")
  val B_BLTU     = BitPat("b?????????????????110?????1100011")
  val B_BNE      = BitPat("b?????????????????001?????1100011")
  val J_JAL      = BitPat("b?????????????????????????1101111")
  val I_JALR     = BitPat("b?????????????????000?????1100111")
  // Other
  val U_AUIPC   = BitPat("b?????????????????????????0010111")
  val U_LUI     = BitPat("b?????????????????????????0110111")
  val EBREAK    = BitPat("b00000000000100000000000001110011")
  val ECALL     = BitPat("b00000000000000000000000001110011")
}
